{"version":3,"sources":["Components/Header.js","Components/PopUp.js","App.js","reportWebVitals.js","index.js"],"names":["header","className","Popup","props","useState","enteredZip","setEnteredZip","enteredZipTouched","setEnteredZipTouched","containsLetter","setLetter","regExp","enteredZipIsValid","trim","test","length","zipEnteredIsInvalid","formIsValid","nameInputClasses","onSubmit","event","preventDefault","method","htmlFor","content","type","id","onBlur","_","onChange","target","value","console","log","disabled","onClick","axios","post","then","res","window","location","href","App","Header","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAUeA,EARA,WACb,OACE,qBAAKC,UAAU,SAAf,SACE,kE,wBC0ESC,G,MA3ED,SAACC,GAAW,IAAD,EACaC,mBAAS,IADtB,mBAChBC,EADgB,KACJC,EADI,OAE2BF,oBAAS,GAFpC,mBAEhBG,EAFgB,KAEGC,EAFH,OAGaJ,oBAAS,GAHtB,mBAGhBK,EAHgB,KAGAC,EAHA,KAIjBC,EAAS,aACTC,EAA2C,KAAtBP,EAAWQ,SAAkBF,EAAOG,KAAKT,IAAeA,EAAWU,QAAU,EAClGC,GAAyBJ,GAAqBL,GAAsBF,EAAWU,OAAS,EAE1FE,GAAc,EACdL,IAAsBH,IACxBQ,GAAc,GAUhB,IA0BMC,EAAmBF,GAAuBP,EAC5C,2BACA,mBAEJ,OACE,sBAAMU,SAjBsB,SAACC,GAC7BA,EAAMC,iBACNb,GAAqB,GAGhBI,IAGLN,EAAc,IACdE,GAAqB,KAQkBc,OAAO,OAAOrB,UAAU,UAA/D,SACE,sBAAKA,UAAWiB,EAAhB,UACE,uBAAOK,QAAQ,UAAUtB,UAAU,cAAnC,SAAkDE,EAAMqB,UACxD,uBACEvB,UAAU,YACVwB,KAAK,OACLC,GAAG,MACHC,OA5BoB,SAAAC,GAC1BpB,GAAqB,IA4BfqB,SAvCsB,SAAAT,GAC5Bd,EAAcc,EAAMU,OAAOC,QAGd,IADApB,EAAOG,KAAKM,EAAMU,OAAOC,QAEpCrB,GAAU,GACVsB,QAAQC,IAAI,YAAaxB,IACpBC,GAAU,IAiCXqB,MAAO1B,IAGT,wBAAQJ,UAAU,SAASiC,UAAWjB,EAAakB,QAlDzD,SAAyBf,GACvBA,EAAMC,iBACNe,IAAMC,KAAK,WAAY,CAAEhC,eAAciC,MAAK,SAAAC,GAC1CC,OAAOC,SAASC,KAAO,cA+CrB,oBAIE1B,GAAuBP,EACrB,mBAAGR,UAAU,aAAb,6BACA,YCpDG0C,MAZf,WACE,OACE,sBAAK1C,UAAU,MAAf,UACE,cAAC2C,EAAD,IACA,cAAC,EAAD,CACEpB,QAAS,iECFFqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,EAAgBb,QAAQC,O","file":"js/main.b6b6461a.chunk.js","sourcesContent":["import React from 'react'\n\nconst header = () => {\n  return (\n    <div className='header'>\n      <h1> Find Your Local Shinanigans </h1>\n    </div>\n  )\n}\n\nexport default header\n","import axios from 'axios'\nimport React, { useState } from 'react'\nimport './PopUp.css'\n\nconst Popup = (props) => {\n  const [enteredZip, setEnteredZip] = useState('')\n  const [enteredZipTouched, setEnteredZipTouched] = useState(false)\n  const [containsLetter, setLetter] = useState(false)\n  const regExp = /[a-zA-Z_]/g\n  const enteredZipIsValid = (enteredZip.trim() !== '' && !regExp.test(enteredZip) && enteredZip.length <= 5)\n  const zipEnteredIsInvalid = ((!enteredZipIsValid && enteredZipTouched) || enteredZip.length > 5)\n\n  let formIsValid = false\n  if (enteredZipIsValid && !containsLetter) {\n    formIsValid = true\n  }\n\n  function zipPostHandler (event) {\n    event.preventDefault()\n    axios.post('/reroute', { enteredZip }).then(res => {\n      window.location.href = 'choices'\n    })\n  }\n\n  const zipInputChangeHandler = event => {\n    setEnteredZip(event.target.value)\n    // console.log('in')\n    const cont = regExp.test(event.target.value)\n    if (cont === true) {\n      setLetter(true)\n      console.log('contains:', containsLetter)\n    } else setLetter(false)\n  }\n\n  const zipInputBlurHandler = _ => {\n    setEnteredZipTouched(true)\n  }\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault()\n    setEnteredZipTouched(true)\n    // send zip to backend here\n    // set if valid or not\n    if (!enteredZipIsValid) {\n      return\n    }\n    setEnteredZip('')\n    setEnteredZipTouched(false)\n  }\n\n  const nameInputClasses = zipEnteredIsInvalid || containsLetter\n    ? 'box form-control invalid'\n    : 'box form-control'\n\n  return (\n    <form onSubmit={formSubmissionHandler} method='POST' className='zipForm'>\n      <div className={nameInputClasses}>\n        <label htmlFor='zipcode' className='label-cover'>{props.content}</label>\n        <input\n          className='zip-entry'\n          type='text'\n          id='zip'\n          onBlur={zipInputBlurHandler}\n          onChange={zipInputChangeHandler}\n          value={enteredZip}\n        />\n        {/* on click send info to backend */}\n        <button className='getZip' disabled={!formIsValid} onClick={zipPostHandler}/* onClick={} */>\n          Submit\n        </button>\n        {/* formIsValid ? <p className='error-text'>Zip must be a number</p> : null */}\n        {(zipEnteredIsInvalid || containsLetter)\n          ? <p className='error-text'>Invalid Zipcode</p>\n          : null}\n      </div>\n    </form>\n  )\n}\n\nexport default Popup\n","import './App.css'\nimport Header from './Components/Header'\nimport GetArea from './Components/PopUp'\n//  import React, { useState } from 'react'\n\n/* function Submit () {\n\n} */\n\nfunction App () {\n  return (\n    <div className='App'>\n      <Header />\n      <GetArea\n        content={<p>Please Enter Your Zip Code</p>}\n        // onClick={Submit()}\n      />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log)\n"],"sourceRoot":""}